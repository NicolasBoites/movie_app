pipeline {
  agent any

  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
    TF_DIR            = 'frontend/infra'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Setup AWS CLI Path') {
      steps {
        script {
          env.PATH = "${env.PATH};C:\\Program Files\\Amazon\\AWSCLIV2"
        }
        bat '''
          echo === FIXING AWS CLI PATH ===
          echo AWS CLI found at: C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe
          echo Testing AWS CLI:
          aws --version
        '''
      }
    }

    stage('Terraform - init & apply') {
      steps {
        withCredentials([[
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'aws-access',      // → AccessKey + SecretKey en Jenkins
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          dir("${TF_DIR}") {
            bat '''
              echo Testing AWS credentials...
              aws sts get-caller-identity || echo ERROR: AWS auth failed
              terraform init -input=false
              terraform apply -auto-approve -input=false
            '''
          }
        }
      }
    }

    stage('Build React') {
      tools { nodejs 'node18' }            // Define tu tool en "Global Tool Configuration"
      steps {
        dir('frontend') {
          bat '''
            npm ci
            npm run build
          '''
        }
      }
    }

    stage('Deploy to S3') {
      steps {
        withCredentials([[
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'aws-access',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            
            // Lee el bucket que Terraform acaba de crear
            def bucket
            dir("${TF_DIR}") {
              bucket = bat(
                script: "terraform output -raw bucket_name",
                returnStdout: true
              ).trim()
            }
            
            // Deploy to S3
            bat '''
              echo Deploying to S3...
              aws sts get-caller-identity
              aws s3 sync frontend/dist/ s3://${bucket}/ --delete
            '''
          }
        }
      }
    }
  }

  post {
    success { echo 'SUCCESS: Build & deploy completados' }
    failure { echo 'ERROR: Algo falló; revisa los logs' }
  }
}
