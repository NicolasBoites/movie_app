pipeline {
  agent any

  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
    TF_DIR            = 'frontend/infra'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Terraform - init & apply') {
      steps {
        withCredentials([[
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'aws-access',      // ‚Üí AccessKey + SecretKey en Jenkins
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            // Debug AWS credentials (safely)
            echo "üîç Verificando credenciales AWS..."
            echo "AWS_ACCESS_KEY_ID length: ${env.AWS_ACCESS_KEY_ID?.length()}"
            echo "AWS_SECRET_ACCESS_KEY length: ${env.AWS_SECRET_ACCESS_KEY?.length()}"
            echo "AWS_ACCESS_KEY_ID starts with: ${env.AWS_ACCESS_KEY_ID?.take(4)}..."
            echo "AWS_DEFAULT_REGION: ${env.AWS_DEFAULT_REGION}"
          }
          
          dir("${TF_DIR}") {
            script {
              if (isUnix()) {
                sh '''
                  echo "üß™ Testing AWS credentials..."
                  aws sts get-caller-identity || echo "‚ùå AWS auth failed"
                '''
                sh 'terraform init -input=false'
                sh 'terraform apply -auto-approve -input=false'
              } else {
                bat '''
                  echo üß™ Testing AWS credentials...
                  aws sts get-caller-identity || echo ‚ùå AWS auth failed
                '''
                bat 'terraform init -input=false'
                bat 'terraform apply -auto-approve -input=false'
              }
            }
          }
        }
      }
    }

    stage('Build React') {
      tools { nodejs 'node18' }            // Define tu tool en "Global Tool Configuration"
      steps {
        script {
          if (isUnix()) {
            sh '''
              npm ci
              npm run build
            '''
          } else {
            bat '''
              npm ci
              npm run build
            '''
          }
        }
      }
    }

    stage('Deploy to S3') {
      steps {
        withCredentials([[
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'aws-access',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            // Debug AWS credentials again
            echo "üîç Deploy - AWS credentials check..."
            echo "AWS_ACCESS_KEY_ID length: ${env.AWS_ACCESS_KEY_ID?.length()}"
            echo "AWS_SECRET_ACCESS_KEY length: ${env.AWS_SECRET_ACCESS_KEY?.length()}"
            
            // Lee el bucket que Terraform acaba de crear
            def bucket
            if (isUnix()) {
              bucket = sh(
                script: "terraform -chdir=${TF_DIR} output -raw bucket_name",
                returnStdout: true
              ).trim()
            } else {
              bucket = bat(
                script: "terraform -chdir=${TF_DIR} output -raw bucket_name",
                returnStdout: true
              ).trim()
            }
            env.S3_BUCKET = bucket
            echo "üì¶ S3 Bucket: ${env.S3_BUCKET}"
            
            // Deploy to S3
            if (isUnix()) {
              sh '''
                echo "üöÄ Deploying to S3..."
                aws sts get-caller-identity
                aws s3 sync build/ s3://$S3_BUCKET/ --delete
              '''
            } else {
              bat '''
                echo üöÄ Deploying to S3...
                aws sts get-caller-identity
                aws s3 sync build/ s3://%S3_BUCKET%/ --delete
              '''
            }
          }
        }
      }
    }
  }

  post {
    success { echo '‚úÖ Build & deploy completados' }
    failure { echo '‚ùå Algo fall√≥; revisa los logs' }
  }
}
