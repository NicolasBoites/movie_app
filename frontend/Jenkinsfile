pipeline {
  agent any

  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
    TF_DIR            = 'frontend/infra'
    PATH = "${env.PATH};C:\\Program Files\\Amazon\\AWSCLIV2"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Setup AWS CLI Path') {
      steps {
        script {
          if (isUnix()) {
            sh 'echo "AWS CLI setup for Unix not needed"'
          } else {
            bat '''
              echo === FIXING AWS CLI PATH ===
              echo AWS CLI found at: C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe
              set PATH=%PATH%;C:\\Program Files\\Amazon\\AWSCLIV2
              echo Testing AWS CLI:
              aws --version
            '''
          }
        }
      }
    }

    stage('Terraform - init & apply') {
      steps {
        withCredentials([[
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'aws-access',      // → AccessKey + SecretKey en Jenkins
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            // Debug AWS credentials (safely)
            echo "DEBUG: Verificando credenciales AWS..."
            echo "AWS_ACCESS_KEY_ID length: ${env.AWS_ACCESS_KEY_ID?.length()}"
            echo "AWS_SECRET_ACCESS_KEY length: ${env.AWS_SECRET_ACCESS_KEY?.length()}"
            echo "AWS_ACCESS_KEY_ID starts with: ${env.AWS_ACCESS_KEY_ID?.take(4)}..."
            echo "AWS_DEFAULT_REGION: ${env.AWS_DEFAULT_REGION}"
          }
          
          dir("${TF_DIR}") {
            script {
              if (isUnix()) {
                sh '''
                  echo "Testing AWS credentials..."
                  aws sts get-caller-identity || echo "ERROR: AWS auth failed"
                '''
                sh 'terraform init -input=false'
                sh 'terraform apply -auto-approve -input=false'
              } else {
                bat '''
                  echo Testing AWS credentials...
                  aws sts get-caller-identity || echo ERROR: AWS auth failed
                '''
                bat 'terraform init -input=false'
                bat 'terraform apply -auto-approve -input=false'
              }
            }
          }
        }
      }
    }

    stage('Build React') {
      tools { nodejs 'node18' }            // Define tu tool en "Global Tool Configuration"
      steps {
        dir('frontend') {
          script {
            if (isUnix()) {
              sh '''
                npm ci
                npm run build
              '''
            } else {
              bat '''
                npm ci
                npm run build
              '''
            }
          }
        }
      }
    }

    stage('Deploy to S3') {
      steps {
        withCredentials([[
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'aws-access',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {
          script {
            // Debug AWS credentials again
            echo "DEBUG: Deploy - AWS credentials check..."
            echo "AWS_ACCESS_KEY_ID length: ${env.AWS_ACCESS_KEY_ID?.length()}"
            echo "AWS_SECRET_ACCESS_KEY length: ${env.AWS_SECRET_ACCESS_KEY?.length()}"
            
            // Lee el bucket que Terraform acaba de crear
            def bucket
            dir("${TF_DIR}") {
              if (isUnix()) {
                bucket = sh(
                  script: "terraform output -raw bucket_name",
                  returnStdout: true
                ).trim()
              } else {
                bucket = bat(
                  script: "terraform output -raw bucket_name",
                  returnStdout: true
                ).trim()
              }
            }
            env.S3_BUCKET = bucket
            echo "S3 Bucket: ${env.S3_BUCKET}"
            
            // Deploy to S3
            if (isUnix()) {
              sh '''
                echo "Deploying to S3..."
                aws sts get-caller-identity
                aws s3 sync frontend/build/ s3://$S3_BUCKET/ --delete
              '''
            } else {
              bat '''
                echo Deploying to S3...
                aws sts get-caller-identity
                aws s3 sync frontend/build/ s3:/%%S3_BUCKET%%/ --delete
              '''
            }
          }
        }
      }
    }
  }

  post {
    success { echo 'SUCCESS: Build & deploy completados' }
    failure { echo 'ERROR: Algo falló; revisa los logs' }
  }
}
